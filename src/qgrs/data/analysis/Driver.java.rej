--- Driver.java
+++ Driver.java
@@ -50,8 +50,8 @@
 		
 		for ( MRNA mrna : all ) {
 			
-			
-			if (DEBUGGING &&  count++ > 100 ) break;
+			//This is to set how many mRNA to go through for tests
+			//if ( count++ > 250 ) break;
 			
 			for ( Homolog h : mrna.getHomologs() ) {
 				homologs.add(mrna.getAccessionNumber() + "x" + h.getMrna().getAccessionNumber());
@@ -111,8 +111,8 @@
 		
 		
 		/*makePolyADistributionAnalysis(as);
-		make5PrimeDistributionAnalysis(as);*/
-		makeAggregateStatAnalysis(as);
+		make5PrimeDistributionAnalysis(as);
+		makeAggregateStatAnalysis(as);*/
 		make5PrimeCountingAnalysis(as, sp);
 		/*makeGScoreConservationAnalaysis(as);*/
 		
@@ -254,7 +254,9 @@
 	}
 	private static void make5PrimeCountingAnalysis(LinkedList<Analysis> as, SequenceProvider sp) {
 		CountingAnalysis fivePrimeCounts = new CountingAnalysis("5 Prime Counts");
+		
 		make5PrimeCountingSet(sp, fivePrimeCounts, "All Mrna - 5Prime", null, null);
+		/*
 		make5PrimeCountingSet(sp, fivePrimeCounts, "Apoptosis",new String [] {"ubiquitin-protein ligase activity", "apoptotic process", "apoptotic signaling pathway", "induction of apoptosis", "execution phase of apoptosis", "negative regulation of apoptotic process", "positive regulation of apoptotic process"}, null);
 		make5PrimeCountingSet(sp, fivePrimeCounts, "Brain Development", new String [] {"brain segmentation", "brain morphogenesis", "central complex development", "forebrain development","hindbrain development","midbrain development"}, null);
 		make5PrimeCountingSet(sp, fivePrimeCounts, "Epigentics", new String [] {"DNA-methyltransferase", "methyl-CpG binding", "methyl-CpNpN binding", "DNA hypermethylation", "DNA hypomethylation"}, null);
@@ -262,13 +264,27 @@
 		make5PrimeCountingSet(sp, fivePrimeCounts, "Oncogenes", null, new String [] {"oncogene"});
 		make5PrimeCountingSet(sp, fivePrimeCounts, "Positive Regulation of Cell Proliferation", new String [] {"positive regulation of cell proliferation"}, null);
 		make5PrimeCountingSet(sp, fivePrimeCounts, "Regulation of Cell Cycle", new String [] {"regulation of cell cycle"}, null);
-		make5PrimeCountingSet(sp, fivePrimeCounts, "Regulation of Cell Cycle", new String [] {"transcription factor complex", "transcription factor binding"}, null);
+		make5PrimeCountingSet(sp, fivePrimeCounts, "Transcription Factor", new String [] {"transcription factor complex", "transcription factor binding"}, null);
+		*/
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >0%", null, null, .00);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >5%", null, null, .05);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >10%", null, null, .1);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >15%", null, null, .15);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >20%", null, null, .20);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >25%", null, null, .25);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >30%", null, null, .30);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >35%", null, null, .35);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >40%", null, null, .40);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >45%", null, null, .45);
+		makeGContentCountingSet(sp, fivePrimeCounts, "G Content: >50%", null, null, .50);
 		as.add(fivePrimeCounts);
 	}
+	
+	
 	private static void make5PrimeCountingSet(SequenceProvider sp, CountingAnalysis fivePrimeCounts, String name, String [] functions, String [] searchTerms) {
 		G4Filter g4 = new G4Filter(Region.FivePrime);
 		G4Filter conserved = new G4Filter(90, Region.FivePrime);
-		MrnaFilter mrna = sp == null ? new MrnaFilter(name) : new MrnaSequenceFilter(name, sp);
+		MrnaFilter mrna = new MrnaFilter(name);
 		if ( functions != null ) {
 			mrna.addOntologyTerms(functions);
 		}
@@ -298,5 +314,21 @@
 		s.conserved.setRegion(r);
 		return s;
 	}
-}
+
 	
+	private static void makeGContentCountingSet(SequenceProvider sp, CountingAnalysis fivePrimeCounts, String name, String [] functions, String [] searchTerms, double percent) {
+		G4Filter g4 = new G4Filter(Region.FivePrime);
+		G4Filter conserved = new G4Filter(90, Region.FivePrime);
+		MrnaFilter mrna = sp == null ? new MrnaFilter(name) : new MrnaSequenceFilter(percent, name, sp);
+		MrnaSequenceFilter gc = new MrnaSequenceFilter(percent, name, sp);
+		if ( functions != null ) {
+			mrna.addOntologyTerms(functions);
+		}
+		if ( searchTerms != null) {
+			mrna.addGeneNameSearchTerms(searchTerms);
+		}
+		fivePrimeCounts.addCountingSet(new CountingSet(mrna, g4, conserved, gc));
+		
+	}
+
+}
\ No newline at end of file
